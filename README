Code a 2D Game Engine using Java

1. Setup Game Window
- Create Window.java to render game window
- Configure game window settings using lwjgl - https://www.lwjgl.org/guide

2. Event Handling
- Setup key listeners and mouse listeners
- TODO set up game pad functionality using joystick listeners: https://www.glfw.org/docs/latest/input_guide.html#joystick

3. Scene Managers
- Setup scene managers
- Setup delta time variable

4. Program the GPU
- Added assets\shaders\default.glsl
- Setup vertex shader, fragment shader
- Compiled and linked shaders in LevelEditorScene
- Generated vertex array object, vertex buffer object, and element buffer object and sent to GPU in LevelEditorScene

5. Regex & Shaders
- Introduced shader abstraction
- Created Shader class in renderer directory

6. Game Camera
- Created camera class
- Set up orthogonal camera for 2d game

7. GLSL Shaders
- Update GLSL shader class
- Uploaded shaders to GPU

8. Texture Loading
- Store texture into an array
- Bind and specify parameters for specific textures (blur / pixelate, wrap / stretch)
- Specify format and upload texture to GPU

9. Entity Component System
- Game Design Paradigms: OOP -> Component Pattern -> Data-Oriented Design -> ECS
- Added ability to create components and add them to game objects
- Can find components from within other components using game objects

10. Batch Rendering
- Renderer / RenderBatch
- Implement batching to render all tiles at once instead of multiple draw calls or passes (improves frame rate)

11. Resource Management
- Created an asset pool to reduce memory burden

12. Texture Batching
- Now able to render textures using
- Updated shader

13. Sprite Sheets
- Implement use of sprite sheets to sample multiple sprites from one texture
- Individual sprites can now be referenced from a spritesheet by indexing the desired sprite in LevelEditorScene

14. Dirty Flags (TODO)
- Incorporation of 'dirty flags' to tell the GPU that a sprite has changed
- Allows for sprite animation